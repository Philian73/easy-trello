openapi: 3.0.0
info:
  version: 1.0.0
  title: Full API - Users, Sessions, Tasks, Boards
  description: API for managing users, sessions, tasks, and boards

servers:
  - url: /api

paths:
  /users:
    get:
      operationId: "getUsers"
      summary: Get all users
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDto"
    post:
      operationId: "createUser"
      summary: Add a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"

  /users/{userId}:
    delete:
      operationId: "deleteUser"
      summary: Remove a user by ID
      parameters:
        - name: userId
          in: path
          description: ID of the user to remove
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation

  /session/me:
    get:
      operationId: "getSession"
      summary: Get current session
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionDto"
  /session/sign-in:
    post:
      operationId: "signIn"
      summary: Sign in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignInDto"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionDto"

  /session/sign-out:
    post:
      operationId: "signOut"
      summary: Sign out
      responses:
        "200":
          description: Successful operation

  /boards:
    get:
      operationId: "getBoards"
      summary: Get all boards
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BoardPartialDto"
    post:
      operationId: "createBoard"
      summary: Add a new board
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBoardDto"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BoardDto"
  /boards/{boardId}:
    get:
      operationId: "getBoardById"
      summary: Get a board by ID
      parameters:
        - name: boardId
          in: path
          description: ID of the board to get
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BoardDto"
    patch:
      operationId: "updateBoard"
      summary: Patch a board
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BoardDto"
      responses:
        "200":
          description: Successful operation
    delete:
      operationId: "deleteBoard"
      summary: Remove a board by ID
      parameters:
        - name: boardId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation

components:
  schemas:
    UserRole:
      type: string
      enum:
        - admin
        - user
    UserDto:
      type: object
      required:
        - id
        - email
        - name
        - avatarId
        - role
        - created
        - updated
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        avatarId:
          type: string
        role:
          $ref: "#/components/schemas/UserRole"
        created:
          type: string
        updated:
          type: string
    CreateUserDto:
      type: object
      required:
        - email
        - name
        - avatarId
        - password
        - role
      properties:
        email:
          type: string
        name:
          type: string
        avatarId:
          type: string
        password:
          type: string
        role:
          $ref: "#/components/schemas/UserRole"
    SignInDto:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
    SessionDto:
      type: object
      required:
        - id
        - name
        - avatarId
        - userId
        - email
        - role
      properties:
        id:
          type: string
        name:
          type: string
        avatarId:
          type: string
        userId:
          type: string
        email:
          type: string
        role:
          $ref: "#/components/schemas/UserRole"

    CreateBoardDto:
      type: object
      required:
        - title
        - editorIds
      properties:
        title:
          type: string
        editorIds:
          type: array
          items:
            type: string

    BoardDto:
      type: object
      required:
        - id
        - authorId
        - ownerId
        - title
        - cards
        - editorIds
        - created
        - updated
      properties:
        id:
          type: string
        authorId:
          type: string
        ownerId:
          type: string
        title:
          type: string
        cards:
          type: array
          items:
            $ref: "#/components/schemas/BoardCardDto"
        editorIds:
          type: array
          items:
            type: string
        created:
          type: string
        updated:
          type: string

    BoardPartialDto:
      type: object
      required:
        - id
        - ownerId
        - title
        - editorIds
      properties:
        id:
          type: string
        ownerId:
          type: string
        title:
            type: string
        editorIds:
          type: array
          items:
            type: string

    BoardPatchDto:
      type: object
      properties:
        title:
          type: string
        cards:
          type: array
          items:
            $ref: "#/components/schemas/BoardCardDto"
        ownerId:
          type: string
        editorIds:
          type: array
          items:
            type: string

    BoardCardDto:
      type: object
      required:
        - id
        - authorId
        - title
        - tasks
        - created
        - updated
      properties:
        id:
          type: string
        authorId:
          type: string
        title:
          type: string
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/BoardTaskDto"
        created:
          type: string
        updated:
          type: string

    BoardTaskDto:
      type: object
      required:
        - id
        - authorId
        - title
        - created
        - updated
      properties:
        id:
          type: string
        authorId:
          type: string
        title:
          type: string
        created:
          type: string
        updated:
          type: string
        description:
          type: string
        assigneeId:
          type: string