/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * Full API - Users, Sessions, Tasks, Boards
 * API for managing users, sessions, tasks, and boards
 * OpenAPI spec version: 1.0.0
 */
import { type BodyType, createInstance } from './api-instance'

export interface BoardTaskDto {
  assigneeId?: string
  authorId: string
  created: string
  description?: string
  id: string
  title: string
  updated: string
}

export interface BoardCardDto {
  authorId: string
  created: string
  id: string
  tasks: BoardTaskDto[]
  title: string
  updated: string
}

export interface BoardPatchDto {
  cards?: BoardCardDto[]
  editorIds?: string[]
  ownerId?: string
  title?: string
}

export interface BoardPartialDto {
  editorIds: string[]
  id: string
  ownerId: string
  title: string
}

export interface BoardDto {
  authorId: string
  cards: BoardCardDto[]
  created: string
  editorIds: string[]
  id: string
  ownerId: string
  title: string
  updated: string
}

export interface CreateBoardDto {
  editorIds: string[]
  title: string
}

export interface SignInDto {
  email: string
  password: string
}

export type UserRole = (typeof UserRole)[keyof typeof UserRole]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserRole = {
  admin: 'admin',
  user: 'user',
} as const

export interface SessionDto {
  avatarId: string
  email: string
  id: string
  name: string
  role: UserRole
  userId: string
}

export interface CreateUserDto {
  avatarId: string
  email: string
  name: string
  password: string
  role: UserRole
}

export interface UserDto {
  avatarId: string
  created: string
  email: string
  id: string
  name: string
  role: UserRole
  updated: string
}

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

/**
 * @summary Get all users
 */
export const getUsers = (options?: SecondParameter<typeof createInstance>) => {
  return createInstance<UserDto[]>({ method: 'GET', url: `/users` }, options)
}

/**
 * @summary Add a new user
 */
export const createUser = (
  createUserDto: BodyType<CreateUserDto>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<UserDto>(
    {
      data: createUserDto,
      headers: { 'Content-Type': 'application/json' },
      method: 'POST',
      url: `/users`,
    },
    options
  )
}

/**
 * @summary Remove a user by ID
 */
export const deleteUser = (userId: string, options?: SecondParameter<typeof createInstance>) => {
  return createInstance<void>({ method: 'DELETE', url: `/users/${userId}` }, options)
}

/**
 * @summary Get current session
 */
export const getSession = (options?: SecondParameter<typeof createInstance>) => {
  return createInstance<SessionDto>({ method: 'GET', url: `/session/me` }, options)
}

/**
 * @summary Sign in
 */
export const signIn = (
  signInDto: BodyType<SignInDto>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<SessionDto>(
    {
      data: signInDto,
      headers: { 'Content-Type': 'application/json' },
      method: 'POST',
      url: `/session/sign-in`,
    },
    options
  )
}

/**
 * @summary Sign out
 */
export const signOut = (options?: SecondParameter<typeof createInstance>) => {
  return createInstance<void>({ method: 'POST', url: `/session/sign-out` }, options)
}

/**
 * @summary Get all boards
 */
export const getBoards = (options?: SecondParameter<typeof createInstance>) => {
  return createInstance<BoardPartialDto[]>({ method: 'GET', url: `/boards` }, options)
}

/**
 * @summary Add a new board
 */
export const createBoard = (
  createBoardDto: BodyType<CreateBoardDto>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<BoardDto>(
    {
      data: createBoardDto,
      headers: { 'Content-Type': 'application/json' },
      method: 'POST',
      url: `/boards`,
    },
    options
  )
}

/**
 * @summary Get a board by ID
 */
export const getBoardById = (boardId: string, options?: SecondParameter<typeof createInstance>) => {
  return createInstance<BoardDto>({ method: 'GET', url: `/boards/${boardId}` }, options)
}

/**
 * @summary Patch a board
 */
export const updateBoard = (
  boardId: string,
  boardPatchDto: BodyType<BoardPatchDto>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<void>(
    {
      data: boardPatchDto,
      headers: { 'Content-Type': 'application/json' },
      method: 'PATCH',
      url: `/boards/${boardId}`,
    },
    options
  )
}

/**
 * @summary Remove a board by ID
 */
export const deleteBoard = (boardId: string, options?: SecondParameter<typeof createInstance>) => {
  return createInstance<void>({ method: 'DELETE', url: `/boards/${boardId}` }, options)
}

export type GetUsersResult = NonNullable<Awaited<ReturnType<typeof getUsers>>>
export type CreateUserResult = NonNullable<Awaited<ReturnType<typeof createUser>>>
export type DeleteUserResult = NonNullable<Awaited<ReturnType<typeof deleteUser>>>
export type GetSessionResult = NonNullable<Awaited<ReturnType<typeof getSession>>>
export type SignInResult = NonNullable<Awaited<ReturnType<typeof signIn>>>
export type SignOutResult = NonNullable<Awaited<ReturnType<typeof signOut>>>
export type GetBoardsResult = NonNullable<Awaited<ReturnType<typeof getBoards>>>
export type CreateBoardResult = NonNullable<Awaited<ReturnType<typeof createBoard>>>
export type GetBoardByIdResult = NonNullable<Awaited<ReturnType<typeof getBoardById>>>
export type UpdateBoardResult = NonNullable<Awaited<ReturnType<typeof updateBoard>>>
export type DeleteBoardResult = NonNullable<Awaited<ReturnType<typeof deleteBoard>>>
